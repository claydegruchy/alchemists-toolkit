{"version":3,"sources":["potion-gen/update.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["faker","require","data","console","log","Array","prototype","unique","Set","this","average","reduce","p","c","length","String","capitalize","charAt","toUpperCase","slice","randomElement","Math","floor","random","number","PotionMaster","options","id","name","Reservation","props","state","selections","handleClick","bind","event","includes","handleDelete","handleAddition","selection","setState","filter","i","map","option","className","key","value","onClick","e","React","Component","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"qPAIIA,G,WADOC,EAAQ,IACPA,EAAQ,KAEhBC,EAAOD,EAAQ,GAEnBE,QAAQC,IAAIF,GAQZG,MAAMC,UAAUC,OAAS,WAAa,OAAO,YAAI,IAAIC,IAAIC,QAEzDJ,MAAMC,UAAUI,QAAU,WAAa,OAAOD,KAAKE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAKJ,KAAKK,QAErFC,OAAOT,UAAUU,WAAa,WAAa,OAAOP,KAAKQ,OAAO,GAAGC,cAAgBT,KAAKU,MAAM,IAE5Fd,MAAMC,UAAUc,cAAgB,WAAa,OAAOX,KAAKY,KAAKC,MAAMC,IAAWd,KAAKK,UAEpF,IAAIS,EAAS,kBAAMvB,EAAMuB,OAAOC,SAAW,K,KAo3B5BC,ICn4BTC,EAAU,CACd,CAAEC,GAAI,YAAaC,KAAM,aACzB,CAAED,GAAI,aAAcC,KAAM,cAC1B,CAAED,GAAI,UAAWC,KAAM,YAGnBC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDJ,QAAUA,EAEf,EAAKK,MAAQ,CACXC,WAAY,IAGd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARF,E,yEAcPC,EAAOR,GAGjBxB,QAAQC,IAAI,wBAAyB+B,EAAOR,GACxClB,KAAKsB,MAAMC,WAAWI,SAAST,IAAKlB,KAAK4B,aAAaV,GACrDlB,KAAKsB,MAAMC,WAAWI,SAAST,IAAKlB,KAAK6B,eAAeX,K,qCAGhDY,GACbpC,QAAQC,IAAI,0BACZK,KAAK+B,UAAS,SAAAT,GAAK,MAAK,CAAEC,WAAW,GAAD,mBAAMD,EAAMC,YAAZ,CAAwBO,QAC5DpC,QAAQC,IAAIK,KAAKsB,S,mCAGNJ,GACXxB,QAAQC,IAAI,wBADG,IAEP4B,EAAevB,KAAKsB,MAApBC,WACRvB,KAAK+B,SAAS,CACZR,WAAYA,EAAWS,QAAO,SAAAC,GAAC,OAAIA,IAAMf,S,+BAInC,IAAD,OACP,OACE,6BACGlB,KAAKiB,QAAQiB,KAAI,SAACC,EAAQF,GACzB,IAAIG,EAAY,EAAKd,MAAMC,WAAWI,SAASQ,GAC3C,aACA,GACJ,OACE,yBACEE,IAAKF,EAAOjB,GACZoB,MAAOH,EAAOjB,GACdqB,QAAS,SAAAC,GAAC,OAAI,EAAKhB,YAAYgB,EAAGL,IAClCC,UAAWA,GAEVA,EAAW,IAAKD,EAAOhB,c,GAnDZsB,IAAMC,WAqFjBC,MAxBf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,yCADF,mCAGE,yBAAKQ,IAAKC,IAAMT,UAAU,WAAWU,IAAI,SACzC,mCACO,4CADP,wBAGA,kBAAC,EAAD,MACA,uBACEV,UAAU,WACVW,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBC3EYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.8e9d915d.chunk.js","sourcesContent":["/* eslint react/prop-types: 0 */\n\n\nvar hash = require('object-hash');\nvar faker = require('faker');\n\nvar data = require('./caco-ingredients.json');\n\nconsole.log(data)\n\n\n\n\n// var originalDataSet = JSON.parse(data)\nvar originalDataSet =  data;\n// eslint-disable-next-line\nArray.prototype.unique = function() { return [...new Set(this)] }\n// eslint-disable-next-line\nArray.prototype.average = function() { return this.reduce((p, c) => p + c, 0) / this.length }\n// eslint-disable-next-line\nString.prototype.capitalize = function() { return this.charAt(0).toUpperCase() + this.slice(1) }\n// eslint-disable-next-line\nArray.prototype.randomElement = function() { return this[Math.floor(random() * this.length)] }\n\nvar random = () => faker.random.number() / 100000\n\nvar generateColour = () => ({\n    r: Math.floor(random() * Math.floor(255)),\n    g: Math.floor(random() * Math.floor(255)),\n    b: Math.floor(random() * Math.floor(255)),\n    a: +random().toFixed(2)\n})\n\n\n\n\n\n\n\nvar options = {\n    minimumCommonEffects: 2,\n    // complexityBooster: 1\n    maxComponents: 4,\n    ratings: [\"very weak\",\n        \"weak\",\n        \"mid-strength\",\n        \"potent\",\n        \"strong\",\n        \"very strong\",\n        \"perfect\"\n    ]\n\n}\n\n\n\n\n\n\n\n\nvar effects = [{\n        \"name\": \"Explosive\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Destruction\"\n    },\n    {\n        \"name\": \"Berserk for x period\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Restoration\"\n    },\n    {\n        \"name\": \"Madness\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Illusion\"\n    },\n    {\n        \"name\": \"Obsession for x period\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Unarmed\"\n    },\n    {\n        \"name\": \"Charm target x for y period\",\n        \"complexity\": 2,\n        \"originalName\": \"Fortify Barter\"\n    },\n    {\n        \"name\": \"Teleport/move location to x\",\n        \"complexity\": 4,\n        \"originalName\": \"Fortify Shouts\"\n    },\n    {\n        \"name\": \"Queasiness\",\n        \"complexity\": 1,\n        \"originalName\": \"Health\"\n    },\n    {\n        \"name\": \"Sadness for x period\",\n        \"complexity\": 1,\n        \"originalName\": \"Magicka\"\n    },\n    {\n        \"name\": \"Multiply duration of other effects of potion\",\n        \"complexity\": 3,\n        \"originalName\": \"Health Fortification\"\n    },\n    {\n        \"name\": \"Multiply magnitude of other effects of potion\",\n        \"complexity\": 3,\n        \"originalName\": \"Stamina Fortification\"\n    },\n    {\n        \"name\": \"Flip other effects of potion\",\n        \"complexity\": 3,\n        \"originalName\": \"Magicka Fortification\"\n    },\n    {\n        \"name\": \"Diarrhea\",\n        \"complexity\": 1,\n        \"originalName\": \"Magicka Regeneration\"\n    },\n    {\n        \"name\": \"Great Wound\",\n        \"complexity\": 3,\n        \"originalName\": \"Ravage Health\"\n    },\n    {\n        \"name\": \"Corruption\",\n        \"complexity\": 1,\n        \"originalName\": \"Damage Magicka\"\n    },\n    {\n        \"name\": \"Gain Sin\",\n        \"complexity\": 3,\n        \"originalName\": \"Damage Magicka Regen\"\n    },\n    {\n        \"name\": \"Damage chaos and demons\",\n        \"complexity\": 3,\n        \"originalName\": \"Lingering Damage Undead\"\n    },\n    {\n        \"name\": \"Reduce mass\",\n        \"complexity\": 2,\n        \"originalName\": \"Drain Strength\"\n    },\n    {\n        \"name\": \"Grow\",\n        \"complexity\": 1,\n        \"originalName\": \"Drain Intelligence\"\n    },\n    {\n        \"name\": \"Increased magic resistance\",\n        \"complexity\": 2,\n        \"originalName\": \"Resist Magic\"\n    },\n    {\n        \"name\": \"Increased heat resistance\",\n        \"complexity\": 2,\n        \"originalName\": \"Resist Fire\"\n    },\n    {\n        \"name\": \"Increased cold resistance\",\n        \"complexity\": 2,\n        \"originalName\": \"Resist Frost\"\n    },\n    {\n        \"name\": \"Increased chaos resistance\",\n        \"complexity\": 2,\n        \"originalName\": \"Resist Shock\"\n    },\n    {\n        \"name\": \"Transmute to x perminantly\",\n        \"complexity\": 4,\n        \"originalName\": \"Magic Aversion\"\n    },\n    {\n        \"name\": \"Gain mass\",\n        \"complexity\": 2,\n        \"originalName\": \"Fire Aversion\"\n    },\n    {\n        \"name\": \"Shrink\",\n        \"complexity\": 3,\n        \"originalName\": \"Frost Aversion\"\n    },\n    {\n        \"name\": \"Increase critical casting chance\",\n        \"complexity\": 3,\n        \"originalName\": \"Shock Aversion\"\n    },\n    {\n        \"name\": \"Polymorph inanimate substance to x for y period\",\n        \"complexity\": 3,\n        \"originalName\": \"Fire Damage\"\n    },\n    {\n        \"name\": \"Filling\",\n        \"complexity\": 1,\n        \"originalName\": \"Frost Damage\"\n    },\n    {\n        \"name\": \"Polymorph living thing to x for y period\",\n        \"complexity\": 3,\n        \"originalName\": \"Shock Damage\"\n    },\n    {\n        \"name\": \"Sleepless rest\",\n        \"complexity\": 1,\n        \"originalName\": \"Poison Aversion\"\n    },\n    {\n        \"name\": \"Move the caster x mins back in time\",\n        \"complexity\": 4,\n        \"originalName\": \"Light\"\n    },\n    {\n        \"name\": \"Gain luck\",\n        \"complexity\": 4,\n        \"originalName\": \"Etherialize\"\n    },\n    {\n        \"name\": \"See visions of location x (scry)\",\n        \"complexity\": 3,\n        \"originalName\": \"Detect Life Potion - Exterior\"\n    },\n    {\n        \"name\": \"Make inanimate living\",\n        \"complexity\": 4,\n        \"originalName\": \"Blood\"\n    },\n    {\n        \"name\": \"Increase time speed\",\n        \"complexity\": 3,\n        \"originalName\": \"Hunter's Boon\"\n    },\n    {\n        \"name\": \"Increase aging speed\",\n        \"complexity\": 4,\n        \"originalName\": \"Hircine's Sight\"\n    },\n    {\n        \"name\": \"Increase stealth\",\n        \"complexity\": 1,\n        \"originalName\": \"Prowling\"\n    },\n    {\n        \"name\": \"See real or fake visions of future\",\n        \"complexity\": 1,\n        \"originalName\": \"Thrill\"\n    },\n    {\n        \"name\": \"Cause hunger\",\n        \"complexity\": 1,\n        \"originalName\": \"Consumption\"\n    },\n    {\n        \"name\": \"Nothing\",\n        \"complexity\": 1,\n        \"originalName\": \"Exploit Weakness\"\n    },\n    {\n        \"name\": \"Increase Strength\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify One-Handed\"\n    },\n    {\n        \"name\": \"Increase Weapon Skill\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Two-Handed\"\n    },\n    {\n        \"name\": \"Increase Ballistic Skill\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Marksman\"\n    },\n    {\n        \"name\": \"Increase Resilience\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Block\"\n    },\n    {\n        \"name\": \"Increase Toughness\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Heavy Armor\"\n    },\n    {\n        \"name\": \"Increase Dexterity\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Sneak\"\n    },\n    {\n        \"name\": \"Increase Initiative\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Lockpicking\"\n    },\n    {\n        \"name\": \"Increase Agility\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Pickpocket\"\n    },\n    {\n        \"name\": \"Increase Fellowship\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Speech\"\n    },\n    {\n        \"name\": \"Powerful stimulent\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Light Armor\"\n    },\n    {\n        \"name\": \"Increase Wounds\",\n        \"complexity\": 2,\n        \"originalName\": \"Fortify Alteration\"\n    },\n    {\n        \"name\": \"Increase Willpower\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Conjuration\"\n    },\n    {\n        \"name\": \"Increase crafting\",\n        \"complexity\": 2,\n        \"originalName\": \"Fortify Smithing\"\n    },\n    {\n        \"name\": \"Increase Intelligence\",\n        \"complexity\": 1,\n        \"originalName\": \"Fortify Enchanting\"\n    },\n    {\n        \"name\": \"Increase Movement\",\n        \"complexity\": 2,\n        \"originalName\": \"Speed\"\n    },\n    {\n        \"name\": \"Restore vigor\",\n        \"complexity\": 1,\n        \"originalName\": \"Stamina\"\n    },\n    {\n        \"name\": \"Regeneration\",\n        \"complexity\": 2,\n        \"originalName\": \"Health Regeneration\"\n    },\n    {\n        \"name\": \"Stamina Regeneration\",\n        \"complexity\": 1,\n        \"originalName\": \"Stamina Regeneration\"\n    },\n    {\n        \"name\": \"Wound\",\n        \"complexity\": 1,\n        \"originalName\": \"Damage Health\"\n    },\n    {\n        \"name\": \"Cause infection\",\n        \"complexity\": 1,\n        \"originalName\": \"Damage Health Regen\"\n    },\n    {\n        \"name\": \"Disfigure\",\n        \"complexity\": 1,\n        \"originalName\": \"Lingering Damage Health\"\n    },\n    {\n        \"name\": \"Exhaust\",\n        \"complexity\": 1,\n        \"originalName\": \"Damage Stamina\"\n    },\n    {\n        \"name\": \"Cripple\",\n        \"complexity\": 1,\n        \"originalName\": \"Damage Stamina Regen\"\n    },\n    {\n        \"name\": \"Fatigue\",\n        \"complexity\": 1,\n        \"originalName\": \"Fatigue\"\n    },\n    {\n        \"name\": \"Silence\",\n        \"complexity\": 1,\n        \"originalName\": \"Silence\"\n    },\n    {\n        \"name\": \"Damage Undead\",\n        \"complexity\": 2,\n        \"originalName\": \"Damage Undead\"\n    },\n    {\n        \"name\": \"Grant fate token\",\n        \"complexity\": 4,\n        \"originalName\": \"Shield\"\n    },\n    {\n        \"name\": \"Resist Disease\",\n        \"complexity\": 1,\n        \"originalName\": \"Cure Disease\"\n    },\n    {\n        \"name\": \"Resist Infection\",\n        \"complexity\": 1,\n        \"originalName\": \"Resist Disease\"\n    },\n    {\n        \"name\": \"Resist Stat changes\",\n        \"complexity\": 2,\n        \"originalName\": \"Cure Poison\"\n    },\n    {\n        \"name\": \"Resist Poison\",\n        \"complexity\": 2,\n        \"originalName\": \"Resist Poison\"\n    },\n    {\n        \"name\": \"Paralysis\",\n        \"complexity\": 2,\n        \"originalName\": \"Paralysis\"\n    },\n    {\n        \"name\": \"Resist Paralysis\",\n        \"complexity\": 3,\n        \"originalName\": \"Resist Paralysis\"\n    },\n    {\n        \"name\": \"Slow\",\n        \"complexity\": 1,\n        \"originalName\": \"Slow\"\n    },\n    {\n        \"name\": \"Feather\",\n        \"complexity\": 3,\n        \"originalName\": \"Feather\"\n    },\n    {\n        \"name\": \"Invisibility\",\n        \"complexity\": 4,\n        \"originalName\": \"Invisibility\"\n    },\n    {\n        \"name\": \"Night Eye\",\n        \"complexity\": 3,\n        \"originalName\": \"Night Eye\"\n    },\n    {\n        \"name\": \"Detect Life\",\n        \"complexity\": 2,\n        \"originalName\": \"Detect Life\"\n    },\n    {\n        \"name\": \"Fear\",\n        \"complexity\": 1,\n        \"originalName\": \"Fear\"\n    },\n    {\n        \"name\": \"Frenzy\",\n        \"complexity\": 1,\n        \"originalName\": \"Frenzy\"\n    },\n    {\n        \"name\": \"Waterbreathing\",\n        \"complexity\": 1,\n        \"originalName\": \"Waterbreathing\"\n    },\n    {\n        \"name\": \"Waterwalking\",\n        \"complexity\": 3,\n        \"originalName\": \"Waterwalking\"\n    },\n    {\n        \"name\": \"Protect Soul\",\n        \"complexity\": 3,\n        \"originalName\": \"Protect Soul\"\n    },\n    {\n        \"name\": \"Chaotic effect\",\n        \"complexity\": 4,\n        \"originalName\": \"Discerning\"\n    },\n    {\n        \"name\": \"Vomiting\",\n        \"complexity\": 1,\n        \"originalName\": \"Pathfinding\"\n    },\n    {\n        \"name\": \"Ineptitude\",\n        \"complexity\": 1,\n        \"originalName\": \"Ineptitude\"\n    },\n    {\n        \"name\": \"Confuse\",\n        \"complexity\": 1,\n        \"originalName\": \"Muddle\"\n    }\n]\n\n\nvar substanceProperties = [\n    'Acidic',\n    'Basic',\n    'Damaged by acid',\n    'Damaged by base',\n    'Expires quickly',\n    'Exothermic',\n    'Thick potion',\n    'Thin potion',\n    'Endothermic',\n    'Flamible',\n    'Oxadising',\n    'Chaotic/mutative',\n    'Vulnrable to light or fire',\n    'Removes all other positive effects',\n    'Magnetic',\n    'Exomagic, never stops reacting',\n    'Endomagic, stops all weaker effects from working',\n]\n\n\n\n\nvar productionRequirements = [\n    \"Disolve in water\",\n    \"crunsh\",\n    \"grind\",\n    \"heat\",\n    \"chill\",\n    \"Shake in a silver vessel\",\n    \"stew for 3 nights\",\n    \"disolve in oil\",\n    \"disolve in acid\",\n    \"ferment for 1 session\",\n    \"boil\",\n    \"evaporating\",\n    \"freeze\",\n    \"requires the presence of chaos\",\n    \"stir under a full moon\",\n    'Distil',\n\n]\n\nvar defaults = {\n    baseData: originalDataSet,\n    effects: effects,\n    substanceProperties: substanceProperties,\n    productionRequirements: productionRequirements,\n    options: options,\n}\n\n\n\nclass Component {\n    constructor(name, effects, colour, properties) {\n        this.effects = effects.map(e => ({\n            ingredientName: name,\n            active: false,\n\n            ...e\n        }))\n        this.name = name\n        this.complexity = 1\n        this.properties = properties\n        this.id = hash(this)\n        this.colour = colour\n        // this.complexity\n    }\n    effectsAdvanced() {\n        return this.effects\n        // .map(e => )\n    }\n    effectsBasic() {\n        return this.effects.map(e => e.name)\n        // .map(e => ({ active: false, ...e }))\n    }\n\n    updateComplexity(add) {\n        if (add) this.complexity += add\n        return this.complexity\n    }\n}\n\n\n\nclass PotionMaster {\n    constructor(seed=Math.random(), args = defaults) {\n        faker.seed(seed)\n        this.data = args.baseData\n        this.options = args.options\n        this.data.effects = args.effects\n        this.data.components = []\n        this.data.substanceProperties = args.substanceProperties\n            .map(e => e.capitalize())\n        this.data.productionRequirements = args.productionRequirements\n            .map(i => i.capitalize())\n        return this.makeDataSet()\n    }\n\n    findComponent(searchQuery) {\n        return this.data.components.find(c => c === searchQuery || c.id === searchQuery || c.name === searchQuery)\n    }\n\n    registerComponent(componentObject) {\n        var dupe = this.findComponent(componentObject.id)\n        if (dupe) {\n            console.log(\"duplicate potion\")\n            return dupe\n        }\n        var n = this.data.components.push(componentObject)\n        return this.data.components[n - 1]\n    }\n\n\n\n\n    findCommonEffects(...ingredientObjects) {\n        console.log(\"running findCommonEffects\", ingredientObjects.length)\n\n\n        var complexity = Math.max(...ingredientObjects.map(i => i.updateComplexity()))\n\n        var effectArray = ingredientObjects\n            .map(i => i.effectsAdvanced())\n            .flat()\n\n        effectArray\n            .forEach((s, i, a) => a[i].active = false)\n\n        effectArray\n            .forEach((effect, i, array) => array[i].count = array\n                .filter(e => e.name === effect.name).length)\n\n\n        //activate effects\n        effectArray\n            .filter(e => e.count >= this.options.minimumCommonEffects)\n            .filter(e => e.complexity <= complexity)\n            .forEach((s, i, a) => a[i].active = true)\n\n        return effectArray\n    }\n\n    validateEffects(productionModifiers = [], effectArray) {\n        console.log(\"running validateEffects\",\n            \"productionModifiers\",\n            productionModifiers.length,\n            \"effectArray\",\n            effectArray.length)\n        // console.log(effectArray)\n        var conditions = {\n            hasNoProductionRequirements: (e) => !e.production,\n            includesProduction: (e) => productionModifiers.includes(e.production),\n            usingPhilosophersStone: (e) => productionModifiers.includes(\"philosophers stone\"),\n\n        }\n        // console.log(effectArray)\n\n        //vlidate prodction\n        // remove junk\n        //keep high level\n        return effectArray\n            //filter production mods\n            .filter((e, i, a) => Object.keys(conditions).some(b => conditions[b](e)))\n            // console.log(t)\n            .filter(e => e.active || e.complexity >= 3)\n    }\n\n    strengthFinder(percent) {\n        // console.log(\"LMAO\", this.options.ratings[Math.round(percent * this.options.ratings.length) - 1], Math.round(percent * this.options.ratings.length) - 1)\n        var index = Math.round(percent * this.options.ratings.length) - 1\n        if (index < 0) index = 0\n        return this.options.ratings[index].capitalize()\n    }\n\n\n    calculateEffectPotency(effectArray) {\n        console.log(\"running calculateEffectPotency\", effectArray.length)\n\n\n\n\n\n        effectArray.forEach((item) => {\n            delete item.ingredientName\n        })\n\n\n        var presentEffects = [...new Set(effectArray.map(e => e.name))]\n\n        presentEffects = presentEffects.map(effect => {\n                var thisEffectCollection = effectArray\n                    .filter(e => e.name === effect)\n                return Object.assign({}, ...thisEffectCollection, {\n                    magnitude: thisEffectCollection\n                        .map(e => e.magnitude)\n                        //this is voodoo\n                        .reduce((a, b) => a + b, 0)\n                })\n            })\n            .map(e => ({ ...e, strength: this.strengthFinder(e.magnitude / e.maxMagnitude) }))\n\n        //trim potion to remove excess effects\n        // if (presentEffects.length > 4) presentEffects = presentEffects.slice(0, 4)\n        return presentEffects\n    }\n\n    finalisePotion(presentEffects, customJunkName = \"Junk\") {\n        console.log(\"running finalisePotion\", presentEffects.length)\n        var potionName = \"Precursor Liquid\"\n        // var colour = Color(\"purple\")\n\n\n        var activeEffects = presentEffects.filter(e => e.active).slice(0, 3)\n        var inactiveEffects = presentEffects.filter(e => !e.active).slice(0, 3)\n\n\n\n        if ((activeEffects.length + inactiveEffects.length) < 1) return new Component(customJunkName,\n            [], generateColour, [\"Smells terrible\"])\n\n\n        // console.log(inactiveEffects.length)\n        // console.log(activeEffects.length)\n\n\n        var strongestEffect = activeEffects\n            .filter(e => e.active)\n            .reduce((prev, current) => (prev.magnitude > current.magnitude) ? prev : current, 0);\n\n        if (strongestEffect) potionName = strongestEffect.name + \" Potion\"\n\n        if (activeEffects.length > 1) potionName = \"Mixed \" + potionName\n\n        //find colours\n        //awaiting colour mixing function\n        var colour = [4, 3, 2, 1]\n        // activeEffects\n        //     .map(e => e.colour)\n        //     .filter(e => e)\n        // .reduce((a, b) => Color(a).mix(Color(b)), 0)\n\n        // if (!colour) colour = inactiveEffects\n        //     .map(e => e.colour)\n        //     .filter(e => e)\n        //     .reduce((a, b) => Color(a).mix(Color(b)), 0)\n\n\n\n\n        var properties = activeEffects.concat(inactiveEffects)\n            .map(e => e.substanceProperty)\n            .filter(e => e)\n            .sort()\n            .slice(0, 3)\n            .unique()\n\n        var newPotion = new Component(potionName,\n            activeEffects.concat(inactiveEffects),\n            colour,\n            properties\n\n        )\n        newPotion.updateComplexity(Math.min.apply(Math, presentEffects.map(e => e.complexity)))\n        return newPotion\n\n    }\n\n    createPotion(productionModifiers, ingredientNames) {\n\n        var m = ingredientNames.map(i => this.findComponent(i))\n        m = this.findCommonEffects(...m)\n        m = this.validateEffects(productionModifiers, m)\n        m = this.calculateEffectPotency(m)\n        m = this.finalisePotion(m)\n        return this.registerComponent(m)\n\n\n    }\n\n\n    makeDataSet() {\n        console.log(\"makeDataSet\")\n        var generationMemory = {}\n        var conditions = {\n            addProductionRequirements: (effect) => {\n                if ((effect.complexity > 2) && (effect.complexity < 4)) {\n                    effect.production = this.data.productionRequirements.slice(0, 3 + effect.complexity).randomElement()\n                }\n\n                if (effect.complexity >= 4) {\n                    effect.production = this.data.productionRequirements.slice(2, this.data.productionRequirements.length).randomElement()\n                }\n\n                return effect\n            },\n\n            addSubstanceProperties: (effect) => {\n\n                if (effect.complexity < 3 && effect.complexity > 1) {\n                    effect.substanceProperty = this.data.substanceProperties\n                        .slice(0, 5).randomElement()\n                }\n                if (effect.complexity >= 3) {\n                    effect.substanceProperty = this.data.substanceProperties.randomElement()\n                }\n                return effect\n            },\n\n            addColour: (effect) => ({ ...effect, colour: generateColour() })\n\n        }\n        //update ingrediants \n        this.data.ingredients\n            // .slice(0, 10)\n            .map(ingredient => {\n                // console.log(ingredient)\n\n                ingredient.effects = ingredient.effects.map((effect, i, a) => {\n\n                    //merge objects\n                    effect = {\n                        ...effect,\n                        ...this.data.effects.find(e => e.originalName === effect.name),\n\n                        //add colours\n\n                    }\n\n                    //apply condions\n                    Object.keys(conditions).forEach(c => effect = conditions[c](effect))\n\n                    generationMemory[effect.name] = (generationMemory[effect.name] ? [...generationMemory[effect.name], effect.magnitude] : [effect.magnitude])\n                    // console.log(effect)\n                    return effect\n\n                })\n                return ingredient\n\n            })\n            //calculate maximum strength\n            .map((ingredient, i, a) => ({ ...ingredient,\n                effects: ingredient.effects.map(e => ({ ...e,\n                    maxMagnitude: generationMemory[e.name]\n                        .sort((a, b) => b - a, 0)\n                        .slice(0, this.options.maxComponents)\n                        .reduce((a, b) => a + b, 0)\n\n                }))\n            }))\n            .map(i => this.registerComponent(new Component(i.name, i.effects)))\n        delete this.data.ingredients\n        console.log(\"makeDataSet complete\", this.data.components.length)\n        return this\n    }\n\n}\n\n\n\nfunction tests(seed) {\n    var pm = new PotionMaster({\n        baseData: originalDataSet,\n        effects: effects,\n        substanceProperties: substanceProperties,\n        productionRequirements: productionRequirements,\n        options: options,\n        seed: seed,\n    })\n\n\n\n\n\n    var explosivePotion = [\n        \"Beehive Husk\",\n        \"Ash Creep Cluster\",\n    ]\n\n    var corruptionPotion = [\n        \"Nordic Barnacle\",\n        \"Tinder Polypore Cap\"\n    ]\n\n\n\n    var productionEffects = [\n        \"Crushing\",\n        \"Disolve in water\",\n        \"philosophers stone\"\n    ]\n\n\n    var components = [\n        pm.createPotion(productionEffects, explosivePotion),\n        pm.createPotion(productionEffects, corruptionPotion)\n    ]\n\n    console.log(components[0], components[1])\n\n    // console.log(pm.data.components.reverse().slice(0,3))\n\n    var invis = pm.createPotion(productionEffects, components)\n\n    return pm.createPotion(productionEffects, [invis, invis])\n}\n\n\n\nexport default PotionMaster\n\n//","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport PotionMaster from \"./potion-gen/update.js\";\nimport \"./potion-gen/caco-ingredients.json\";\n\n\n\nconst options = [\n  { id: \"chocolate\", name: \"Chocolate\" },\n  { id: \"strawberry\", name: \"Strawberry\" },\n  { id: \"vanilla\", name: \"Vanilla\" }\n];\n\nclass Reservation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.options = options;\n\n    this.state = {\n      selections: []\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n\n    // this.handleDelete = this.handleDelete.bind(this);\n    // this.handleAddition = this.handleAddition.bind(this);\n  }\n\n  handleClick(event, id) {\n    // event.preventDefault();\n    // this.state.selections.\n    console.log(\"The link was clicked.\", event, id);\n    if (this.state.selections.includes(id)) this.handleDelete(id);\n    if (!this.state.selections.includes(id)) this.handleAddition(id);\n  }\n\n  handleAddition(selection) {\n    console.log(\"running handleAddition\");\n    this.setState(state => ({ selections: [...state.selections, selection] }));\n    console.log(this.state);\n  }\n\n  handleDelete(id) {\n    console.log(\"running handleDelete\");\n    const { selections } = this.state;\n    this.setState({\n      selections: selections.filter(i => i !== id)\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.options.map((option, i) => {\n          var className = this.state.selections.includes(option)\n            ? \"[Selected]\"\n            : \"\";\n          return (\n            <div\n              key={option.id}\n              value={option.id}\n              onClick={e => this.handleClick(e, option)}\n              className={className}\n            >\n              {className +\" \"+ option.name}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\n// {dropdown(\"placeholder\",options)}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button>hello</button>\n        haha im posting on the internet!\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <Reservation />\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.23ab35d7.svg\";"],"sourceRoot":""}